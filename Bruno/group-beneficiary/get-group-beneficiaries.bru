meta {
  name: get-group-beneficiaries
  type: http
  seq: 2
}

get {
  url: {{url}}/beneficiaries/groups/{{group-details.uuid}}
  body: none
  auth: none
}

assert {
  res.status: eq 200
  res.body.success: eq true
  res.body.data: isJson 
}

script:pre-request {
  const { beneficiaryData } = require('./temp/beneficiary-data.json');
  const { access_token } = require("./temp/auth-data.json");
  req.setHeader("Authorization", `Bearer ${access_token}`);
  
  const url = bru.getEnvVar('url');
  const uuid= bru.getEnvVar('group_uuid');
  req.setUrl(`${url}/beneficiaries/groups/${uuid}`);
  
}

script:post-response {
  const createFile = require('./createFile');
  
  var resData = res.getBody();
  bru.setVar("groupDto", resData.data);
  
  const group = bru.getVar("groupDto");
  const data = {"groupData": group};
  createFile(data, 'group-data.json');
}

tests {
  var groupDetails = res.getBody().data;
  bru.setVar("group-details", groupDetails);
  bru.setVar("group-uuid", groupDetails.uuid);
  
  test('should return group detail using uuid', async () => {
    const result = res.getBody();
    expect(res.body.data).to.equal(result.data);
    expect(res.body.data).to.have.property('id');
    expect(res.body.data).to.have.property('uuid');
    expect(res.body.data).to.have.property('name');
    expect(res.body.data).to.have.property('createdAt');
    expect(res.body.data).to.have.property('updatedAt');
    expect(res.body.data).to.have.property('deletedAt');
    expect(res.body.data).to.have.property('groupedBeneficiaries');
  });
  
}
