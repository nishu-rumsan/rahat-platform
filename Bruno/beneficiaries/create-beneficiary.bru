meta {
  name: create-beneficiary
  type: http
  seq: 1
}

post {
  url: {{url}}/beneficiaries
  body: json
  auth: none
}

headers {
  Authorization: Bearer {{access-token}}
}

assert {
  res.status: eq 201
  res.body.success: eq true
  res.body.data: isJson
}

script:pre-request {
  const { faker } = require("@faker-js/faker");
  
  const gender = "FEMALE";
  const birthDate = faker.date.birthdate().toISOString();
  const age = 26;
  const location = faker.location.city();
  const latitude = faker.location.latitude();
  const longitude = faker.location.longitude();
  const extras = {
    email : faker.internet.email(),
    hasCitizenship : faker.datatype.boolean(),
    passportNumber : faker.number.int({ min:10000 })
  };
  const notes = faker.number.int({ min : 1000000 }).toString();
  const bankedStatus = "BANKED";
  const internetStatus = "NO_INTERNET";
  const phoneStatus = "FEATURE_PHONE";
  const piiData = {
    name : faker.person.fullName(),
    phone : faker.phone.number(),
    extras: {
      bank: faker.string.alpha(),
      account: faker.finance.accountNumber()
    }
  };
  
  req.setBody({
    gender,
    birthDate,
    age,
    location,
    latitude,
    longitude,
    extras,
    notes,
    bankedStatus,
    internetStatus,
    phoneStatus,
    piiData
  })
  // req.setHeader("Authorization",`Bearer ${bru.getEnvVar("access_token")}`);
}

tests {
  var resp = res.getBody().data;
  bru.setVar("benef-uuid", resp.uuid);
  bru.setVar("wallet-address", resp.walletAddress);
  
  test('should create new beneficiary if wallet isnot provided', async () => {
    const data = res.getBody();
    expect(res.getStatus()).to.equal(201);
    expect(res.body.success).to.equal(true);
    expect(res.body.data).to.equal(data.data);
  });
}
