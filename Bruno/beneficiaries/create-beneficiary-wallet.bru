meta {
  name: create-beneficiary-wallet
  type: http
  seq: 1
}

post {
  url: {{url}}/beneficiaries
  body: json
  auth: bearer
}

headers {
  Authorization: {{access-token}}
}

auth:bearer {
  token: {{access-token}}
}

body:json {
  {
        "walletAddress": "0xeA85CBD038c272e3D1b9766a7bfBe66c0C8973d7",
        "gender": "MALE",
        "birthDate": "1947-10-18T21:39:58.540Z",
        "age": 26,
        "location": "Sanepa",
        "latitude": "-64.9021",
        "longitude": "146.1826",
        "extras": {
            "email": "test@mailinator.com",
            "hasCitizenship": "true",
            "passportNumber":"123456789"
        },
        "notes": "123456",
        "bankedStatus": "BANKED",
        "internetStatus": "MOBILE_INTERNET",
        "phoneStatus": "FEATURE_PHONE",
        "piiData": {
            "name": "Test Thapa",
            "phone": "9843747479",
            "extras": {
                "bank": "Laxmi Bank",
                "account": "984746784"
            }
        } 
  }
  
}

script:pre-request {
  req.setBody({
        walletAddress: "0xeA85CBD038c272e3D1b9766a7bfBe66c0C8973d7",
        gender: "MALE",
        birthDate: "1947-10-18T21:39:58.540Z",
        age: 26,
        location: "Sanepa",
        latitude: "-64.9021",
        longitude: "146.1826",
        extras: {
            email: "test@mailinator.com",
            hasCitizenship: "true",
            passportNumber:"123456789"
        },
        notes: "123456",
        bankedStatus: "BANKED",
        internetStatus: "MOBILE_INTERNET",
        phoneStatus: "FEATURE_PHONE",
        piiData: {
            name: "Test Thapa",
            phone: "9843747479",
            extras: {
                bank: "Laxmi Bank",
                account: "984746784"
            }
        } 
  });
  
}

tests {
  var resBody = res.getBody().data;
  bru.setVar("benef-uuid", resBody.uuid);
  
  test('should create new beneficiary if wallet is provided', async () => {
    const createdData = res.getBody();
    expect(res.getStatus()).to.equal(201);
    expect(res.body.success).to.equal(true);
    expect(res.body.data).to.equal(createdData.data);
    expect(createdData).toBeDefined();
  });
  
  
  
  
  
}
