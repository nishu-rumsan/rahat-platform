meta {
  name: get-challenge
  type: http
  seq: 3
}

post {
  url: {{url}}/auth/challenge
  body: none
  auth: none
}

assert {
  res.status: eq 201
  res.success: eq true
}

tests {
  var resChall = res.getBody().data;
  console.log(resChall, 'resChall');
  bru.setVar('challenge',resChall.challenge);
  console.log(bru.getVar('challenge'), 'challenge');

  const { privateKeyToAccount } = require('viem/accounts');
  const { TextEncoder } = require('text-encoding');

  async function signMessage(message) {
    const account = privateKeyToAccount("{{privateKey}}")
    console.log(account, 'account');
    const encoder = new TextEncoder();
    const uint8Array = encoder.encode(message);
    const signature = await account.signMessage({
      message,
    })
    bru.setVar('signature', signature);
    console.log(bru.getVar('signature'), 'signature');
  }

  signMessages('Sample message');
  
  test('should return challenge', async () => {
    const result = res.getBody();
    console.log(result);
    expect(res.body.data).to.equal(result.data);
    expect(result.data).to.have.property('challenge');
  });
}
