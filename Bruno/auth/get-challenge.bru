meta {
  name: get-challenge
  type: http
  seq: 1
}

post {
  url: {{url}}/auth/challenge
  body: none
  auth: none
}

assert {
  res.status: eq 201
  res.body.success: eq true
}

tests {
  var resChall = res.getBody().data;
  // console.log(resChall, 'resChall');
  bru.setVar('challenge',resChall.challenge);
  console.log(bru.getVar('challenge'), 'challenge');
  
  const {ethers} = require('ethers');
  
  async function signMessage(message) {
    const wallet = new ethers.Wallet(bru.getEnvVar('private-key'));
    const signature = await wallet.signMessage(message);
    console.log(signature, 'signature');
    bru.setVar('signature', signature);
    console.log(bru.getVar('signature'), 'signature');
  }
  
  await signMessage(bru.getVar('challenge'));
  
  test('should return challenge', async () => {
    const result = res.getBody();
    expect(res.body.data).to.equal(result.data);
    expect(result.data).to.have.property('challenge');
  });
}
